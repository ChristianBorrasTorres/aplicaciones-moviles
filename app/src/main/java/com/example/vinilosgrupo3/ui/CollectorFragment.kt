package com.example.vinilosgrupo3.uiimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Buttonimport android.widget.Toastimport androidx.fragment.app.Fragmentimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelProviderimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport androidx.navigation.fragment.findNavControllerimport com.example.vinilosgrupo3.Rimport com.example.vinilosgrupo3.databinding.CollectorFragmentBindingimport com.example.vinilosgrupo3.models.Collectorimport com.example.vinilosgrupo3.ui.adapters.CollectorAdapterimport com.example.vinilosgrupo3.viewmodels.CollectorViewModel/** * A simple [Fragment] subclass as the default destination in the navigation. */class CollectorFragment : Fragment() {    private var _binding: CollectorFragmentBinding? = null    private val binding get() = _binding!!    private lateinit var recyclerView: RecyclerView    private lateinit var viewModel: CollectorViewModel    private var viewModelAdapter: CollectorAdapter? = null    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        _binding = CollectorFragmentBinding.inflate(inflater, container, false)        val view = binding.root        viewModelAdapter = CollectorAdapter()        val buttonCreateAlbum = view.findViewById<Button>(R.id.button_create_album)        buttonCreateAlbum.setOnClickListener {            val action = CollectorFragmentDirections.actionCollectorFragmentToCreateAlbumFragment()            findNavController().navigate(action)        }        return view    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        recyclerView = binding.collectorsRv        recyclerView.layoutManager = LinearLayoutManager(context)        recyclerView.adapter = viewModelAdapter    }    override fun onActivityCreated(savedInstanceState: Bundle?) {        super.onActivityCreated(savedInstanceState)        val activity = requireNotNull(this.activity) {            "You can only access the viewModel after onActivityCreated()"        }        activity.actionBar?.title = getString(R.string.title_albums)        viewModel = ViewModelProvider(this, CollectorViewModel.Factory(activity.application)).get(CollectorViewModel::class.java)        viewModel.collectors.observe(viewLifecycleOwner, Observer<List<Collector>> {            it.apply {                viewModelAdapter!!.collectors = this            }        })        viewModel.eventNetworkError.observe(viewLifecycleOwner, Observer<Boolean> { isNetworkError ->            if (isNetworkError) onNetworkError()        })    }    override fun onDestroyView() {        super.onDestroyView()        _binding = null    }    private fun onNetworkError() {        if(!viewModel.isNetworkErrorShown.value!!) {            Toast.makeText(activity, "Network Error", Toast.LENGTH_LONG).show()            viewModel.onNetworkErrorShown()        }    }}